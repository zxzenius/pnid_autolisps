; =={ Line Break }==
; Break a line when crossing

(defun c:lbreak (/ selset) 
  ; (setq selset (ssget "_+.:E:S" 
  ;                     '((-4 . "<or") (0 . "LINE") (0 . "POLYLINE") (-4 . "or>"))
  ;              )
  ; )
  (vl-cmdf)
)

(defun LM:intersections ( ob1 ob2 mod / lst rtn )
    (if (and (vlax-method-applicable-p ob1 'intersectwith)
             (vlax-method-applicable-p ob2 'intersectwith)
             (setq lst (vlax-invoke ob1 'intersectwith ob2 mod))
        )
        (repeat (/ (length lst) 3)
            (setq rtn (cons (list (car lst) (cadr lst) (caddr lst)) rtn)
                  lst (cdddr lst)
            )
        )
    )
    (reverse rtn)
)

(defun c:inter ( / obj1 obj2 )    
    (if (and (setq obj1 (car (entsel "\nSelect 1st Object: ")))
             (setq obj2 (car (entsel "\nSelect 2nd Object: ")))
        )
        (foreach pnt (LM:intersections (vlax-ename->vla-object obj1) (vlax-ename->vla-object obj2) acextendnone)
            (entmake (list '(0 . "POINT") (cons 10 pnt)))
        )
    )
    (princ)
)

(defun c:gap ( / obj lst pt pt1 pt2 gap)
  (if (setq lst (entsel "\nSelect line to break:"))
    (progn
      (setq gap 3)
      (setq obj (car lst))
      (setq pt (cadr lst))
      (setq pt1 (list (car pt) (+ (cadr pt) gap) (caddr pt)))
      (setq pt2 (list (car pt) (- (cadr pt) gap) (caddr pt)))
      ; (princ pt2)
      (vl-cmdf "_.break" (list obj pt1) "_non" pt2)
      ; (vl-cmdf "_.break" (list obj pt) "_non" pt2)
      ; (vl-cmdf "_.break" lst "_non" pt2)
    )
  )
  (princ)
)
(vl-load-com) (princ)